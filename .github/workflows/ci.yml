name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: test
    env:
      APP_KEYS: ${{ secrets.APP_KEYS }}
      ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
      API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
      TRANSFER_TOKEN_SALT: ${{ secrets.TRANSFER_TOKEN_SALT }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      TEST_DATABASE_USERNAME: ${{ vars.TEST_DATABASE_USERNAME }}
      TEST_DATABASE_PASSWORD: ${{ vars.TEST_DATABASE_PASSWORD }}
      TEST_DATABASE_NAME: ${{ vars.TEST_DATABASE_NAME }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ vars.TEST_DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ vars.TEST_DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ vars.TEST_DATABASE_NAME }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - ${{ vars.TEST_DATABASE_PORT }}:5432

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "yarn"
      - run: yarn --frozen-lockfile
      - run: yarn build
      - run: yarn test
